{"name": "商家中心，商家新增授信操作", "status": "broken", "statusDetails": {"message": "httprunner.exceptions.ValidationFailure: assert body.code equal 000000(str)\t==> fail\ncheck_item: body.code\ncheck_value: sys.ChannelCenter.500(str)\nassert_method: equal\nexpect_value: 000000(str)\nassert body.msg equal Success(str)\t==> fail\ncheck_item: body.msg\ncheck_value: 未知错误，请联系系统管理员(str)\nassert_method: equal\nexpect_value: Success(str)", "trace": "self = <testcases.商家中心.business_edite_test.TestCaseBusinessEdite object at 0x0000017D2226A2C8>, param = {'file_path': 'image/discount.jpg', 'password': '200622', 'regType': 4, 'userName': 'opsAdmin', ...}\n\n    @pytest.mark.parametrize(\n        'param',\n        Parameters(\n            {\n                \"x_app_id\": [\"200\"],\n                \"x_tenant_id\": ['2'],\n                \"password\": [\"200622\"],\n                \"regType\": [4],\n                \"userName\": [\"opsAdmin\"],\n                \"verifyCode\": [\"1234\"],\n                \"file_path\": ['image/discount.jpg']\n            }\n        ),\n    )\n    def test_start(self, param):\n>       super().test_start(param)\n\ntestcases\\商家中心\\business_edite_test.py:27: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nD:\\ProgramFiles\\python\\lib\\site-packages\\httprunner\\runner.py:456: in test_start\n    TestCase(config=self.__config, teststeps=self.__teststeps)\nD:\\ProgramFiles\\python\\lib\\site-packages\\httprunner\\runner.py:357: in run_testcase\n    extract_mapping = self.__run_step(step)\nD:\\ProgramFiles\\python\\lib\\site-packages\\httprunner\\runner.py:295: in __run_step\n    step_data = self.__run_step_request(step)\nD:\\ProgramFiles\\python\\lib\\site-packages\\httprunner\\runner.py:209: in __run_step_request\n    validators, variables_mapping, self.__project_meta.functions\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <httprunner.response.ResponseObject object at 0x0000017D233A4F88>\nvalidators = [{'equal': ['status_code', 200, '']}, {'equal': ['headers.\"Content-Type\"', 'application/json;charset=UTF-8', '']}, {'equal': ['body.code', '000000', '']}, {'equal': ['body.msg', 'Success', '']}]\nvariables_mapping = {'accountCode': 'AB1295548655972728833', 'cityId': None, 'contactNumber': None, 'customerCode': 'AB1295548655972728833', ...}\nfunctions_mapping = {'get_base_url': <function get_base_url at 0x0000017D22245438>, 'get_comm_vaiales': <function get_comm_vaiales at 0x0000017D222451F8>}\n\n    def validate(\n        self,\n        validators: Validators,\n        variables_mapping: VariablesMapping = None,\n        functions_mapping: FunctionsMapping = None,\n    ) -> NoReturn:\n    \n        variables_mapping = variables_mapping or {}\n        functions_mapping = functions_mapping or {}\n    \n        self.validation_results = {}\n        if not validators:\n            return\n    \n        validate_pass = True\n        failures = []\n    \n        for v in validators:\n    \n            if \"validate_extractor\" not in self.validation_results:\n                self.validation_results[\"validate_extractor\"] = []\n    \n            u_validator = uniform_validator(v)\n    \n            # check item\n            check_item = u_validator[\"check\"]\n            if \"$\" in check_item:\n                # check_item is variable or function\n                check_item = parse_data(\n                    check_item, variables_mapping, functions_mapping\n                )\n                check_item = parse_string_value(check_item)\n    \n            if check_item and isinstance(check_item, Text):\n                check_value = self._search_jmespath(check_item)\n            else:\n                # variable or function evaluation result is \"\" or not text\n                check_value = check_item\n    \n            # comparator\n            assert_method = u_validator[\"assert\"]\n            assert_func = get_mapping_function(assert_method, functions_mapping)\n    \n            # expect item\n            expect_item = u_validator[\"expect\"]\n            # parse expected value with config/teststep/extracted variables\n            expect_value = parse_data(expect_item, variables_mapping, functions_mapping)\n    \n            # message\n            message = u_validator[\"message\"]\n            # parse message with config/teststep/extracted variables\n            message = parse_data(message, variables_mapping, functions_mapping)\n    \n            validate_msg = f\"assert {check_item} {assert_method} {expect_value}({type(expect_value).__name__})\"\n    \n            validator_dict = {\n                \"comparator\": assert_method,\n                \"check\": check_item,\n                \"check_value\": check_value,\n                \"expect\": expect_item,\n                \"expect_value\": expect_value,\n                \"message\": message,\n            }\n    \n            try:\n                assert_func(check_value, expect_value, message)\n                validate_msg += \"\\t==> pass\"\n                logger.info(validate_msg)\n                validator_dict[\"check_result\"] = \"pass\"\n            except AssertionError as ex:\n                validate_pass = False\n                validator_dict[\"check_result\"] = \"fail\"\n                validate_msg += \"\\t==> fail\"\n                validate_msg += (\n                    f\"\\n\"\n                    f\"check_item: {check_item}\\n\"\n                    f\"check_value: {check_value}({type(check_value).__name__})\\n\"\n                    f\"assert_method: {assert_method}\\n\"\n                    f\"expect_value: {expect_value}({type(expect_value).__name__})\"\n                )\n                message = str(ex)\n                if message:\n                    validate_msg += f\"\\nmessage: {message}\"\n    \n                logger.error(validate_msg)\n                failures.append(validate_msg)\n    \n            self.validation_results[\"validate_extractor\"].append(validator_dict)\n    \n        if not validate_pass:\n            failures_string = \"\\n\".join([failure for failure in failures])\n>           raise ValidationFailure(failures_string)\nE           httprunner.exceptions.ValidationFailure: assert body.code equal 000000(str)\t==> fail\nE           check_item: body.code\nE           check_value: sys.ChannelCenter.500(str)\nE           assert_method: equal\nE           expect_value: 000000(str)\nE           assert body.msg equal Success(str)\t==> fail\nE           check_item: body.msg\nE           check_value: 未知错误，请联系系统管理员(str)\nE           assert_method: equal\nE           expect_value: Success(str)\n\nD:\\ProgramFiles\\python\\lib\\site-packages\\httprunner\\response.py:270: ValidationFailure"}, "description": "TestCase ID: 088e8c1d-68db-49c9-89d1-8957c2f6c392", "steps": [{"name": "step: /ops/api/web/getVerificationCode", "status": "passed", "start": 1597733534676, "stop": 1597733534787}, {"name": "step: /ops/api/web/login", "status": "passed", "start": 1597733534787, "stop": 1597733534868}, {"name": "step: /ops/api/business/query", "status": "passed", "start": 1597733534869, "stop": 1597733534958}, {"name": "step: /ops/api/business/queryEditBasicInfo", "status": "passed", "start": 1597733534958, "stop": 1597733535012}, {"name": "step: /ops/api/customer/getOne", "status": "passed", "start": 1597733535012, "stop": 1597733535072}, {"name": "step: /ops/api/business/queryQualifications", "status": "passed", "start": 1597733535072, "stop": 1597733535132}, {"name": "step: /ops/api/settlementRule/queryDistribution", "status": "passed", "start": 1597733535132, "stop": 1597733535192}, {"name": "step: /ops/api/business/queryEditOther", "status": "passed", "start": 1597733535192, "stop": 1597733535273}, {"name": "step: /ops/api/business/editBasicInfo", "status": "passed", "start": 1597733535273, "stop": 1597733535352}, {"name": "step: /ops/api/bscarea/getBscAreaList", "status": "passed", "start": 1597733535352, "stop": 1597733535402}, {"name": "step: /ops/api/bscarea/getBscAreaList", "status": "passed", "start": 1597733535402, "stop": 1597733535528}, {"name": "step: /ops/api/customer/edit", "status": "broken", "statusDetails": {"message": "httprunner.exceptions.ValidationFailure: assert body.code equal 000000(str)\t==> fail\ncheck_item: body.code\ncheck_value: sys.ChannelCenter.500(str)\nassert_method: equal\nexpect_value: 000000(str)\nassert body.msg equal Success(str)\t==> fail\ncheck_item: body.msg\ncheck_value: 未知错误，请联系系统管理员(str)\nassert_method: equal\nexpect_value: Success(str)\n", "trace": "  File \"D:\\ProgramFiles\\python\\lib\\site-packages\\httprunner\\runner.py\", line 357, in run_testcase\n    extract_mapping = self.__run_step(step)\n  File \"D:\\ProgramFiles\\python\\lib\\site-packages\\httprunner\\runner.py\", line 295, in __run_step\n    step_data = self.__run_step_request(step)\n  File \"D:\\ProgramFiles\\python\\lib\\site-packages\\httprunner\\runner.py\", line 209, in __run_step_request\n    validators, variables_mapping, self.__project_meta.functions\n  File \"D:\\ProgramFiles\\python\\lib\\site-packages\\httprunner\\response.py\", line 270, in validate\n    raise ValidationFailure(failures_string)\n"}, "start": 1597733535528, "stop": 1597733535569}], "attachments": [{"name": "stderr", "source": "cced1af7-7b9c-4b9d-be6a-dd719fdd83a7-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "param", "value": "{'x_app_id': '200', 'x_tenant_id': '2', 'password': '200622', 'regType': 4, 'userName': 'opsAdmin', 'verifyCode': '1234', 'file_path': 'image/discount.jpg'}"}], "start": 1597733534674, "stop": 1597733535570, "uuid": "9efbab83-85e2-4c4a-8138-e46caac615f2", "historyId": "0a5d797f00dd592f426c760791465f1d", "testCaseId": "512e7aef14bd784685ba4b06e38dad23", "fullName": "testcases.商家中心.business_edite_test.TestCaseBusinessEdite#test_start", "labels": [{"name": "parentSuite", "value": "testcases.商家中心"}, {"name": "suite", "value": "business_edite_test"}, {"name": "subSuite", "value": "TestCaseBusinessEdite"}, {"name": "host", "value": "LAPTOP-07J5HUC0"}, {"name": "thread", "value": "13280-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testcases.商家中心.business_edite_test"}]}