# NOTE: Generated By HttpRunner v3.1.4
# FROM: 商家新增授信.har

#数据库的数据发生变化，商家列表第一列中的商家信息不完善因此暂时无法运行，这个问题后面解决


from httprunner import HttpRunner, Config, Step, RunRequest, RunTestCase
import pytest
from httprunner import Parameters
from testcases.login.login_test import TestCaseLogin as Login

class TestCaseBusinessCredit(HttpRunner):

    @pytest.mark.parametrize(
        'param',
        Parameters(
            {
                "x_app_id": ["200"],
                "x_tenant_id": ['2'],
                "password": ["200622"],
                "regType": [4],
                "userName": ["opsAdmin"],
                "verifyCode": ["1234"],
            }
        ),
    )
    def test_start(self, param):
        super().test_start(param)


    config = (
        Config("商家中心，商家新增授信操作")
        .base_url("${get_base_url()}")
        .variables(**{
            "x_app_id": "200",
            "x_tenant_id": '2',
            "password": "200622",
            "regType": 4,
            "userName": "opsAdmin",
            "verifyCode": "1234",
        })
        .verify(False)
        .export(*["token", "verifyId", "sessionId"])
    )


    teststeps = [
        Step(
            RunTestCase("login")
            .call(Login)
            .export(*["token", "verifyId", "sessionId", "x_tenant_id"])
        ),
        Step(
            RunRequest("/ops/api/business/query")
            .get("/ops/api/business/query")
            .with_params(**{"currentPage": "1", "pageSize": "10", "qp-regType-eq": "2"})
            .with_headers(
                **{
                    "x-app-id": "$x_app_id",
                    "x-tenant-id": "$x_tenant_id",
                    "sso_sessionid": "$sessionId",
                    "Token": "$token",
                }
            )
            .extract()
            .with_jmespath('body.data.list[0].accountCode', 'customerCode')
            .with_jmespath('body.data.list[0].name', 'name')
            .with_jmespath('body.data.list[0].orgCode', "orgCode")
            .with_jmespath('body.data.list[0].id', "distribution_id")
            .validate()
            .assert_equal("status_code", 200)
            .assert_equal('headers."Content-Type"', "application/json;charset=UTF-8")
            .assert_equal("body.code", "000000")
            .assert_equal("body.msg", "Success")
        ),
        Step(
            RunRequest("/ops/api/store/query")
            .get("/ops/api/store/query")
            .with_params(**{"currentPage": "1", "pageSize": "10"})
            .with_headers(
                **{
                    "x-app-id": "$x_app_id",
                    "x-tenant-id": "$x_tenant_id",
                    "sso_sessionid": "$sessionId",
                    "Token": "$token",
                }
            )
            .validate()
            .assert_equal("status_code", 200)
            .assert_equal('headers."Content-Type"', "application/json;charset=UTF-8")
            .assert_equal("body.code", "000000")
            .assert_equal("body.msg", "Success")
        ),
        Step(
            RunRequest("/ops/api/settlementRule/queryDistribution")
            .get("/ops/api/settlementRule/queryDistribution")
            .with_params(**{"customerCode": "$customerCode"})
            .with_headers(
                **{
                    "x-app-id": "$x_app_id",
                    "x-tenant-id": "$x_tenant_id",
                    "sso_sessionid": "$sessionId",
                    "Token": "$token",
                }
            )
            .validate()
            .assert_equal("status_code", 200)
            .assert_equal('headers."Content-Type"', "application/json;charset=UTF-8")
            .assert_equal("body.code", "000000")
            .assert_equal("body.msg", "Success")
        ),
        Step(
            RunRequest("/ops/api/settlementRule/editDistribution")
            .patch("/ops/api/settlementRule/editDistribution")
            .with_headers(
                **{
                    "x-app-id": "$x_app_id",
                    "x-tenant-id": "$x_tenant_id",
                    "sso_sessionid": "$sessionId",
                    "Token": "$token",
                }
            )
            .with_json(
                {
                    "quota": 10000,
                    "remark": "$name",
                    "id": "$distribution_id",
                    "customerCode": "$customerCode",
                    "orgCode": "$orgCode",
                    "operateNo": "1",
                }
            )
            .validate()
            .assert_equal("status_code", 200)
            .assert_equal('headers."Content-Type"', "application/json;charset=UTF-8")
            .assert_equal("body.code", "000000")
            .assert_equal("body.msg", "Success")
        ),
        Step(
            RunRequest("/ops/api/business/query")
            .get("/ops/api/business/query")
            .with_params(**{"currentPage": "1", "pageSize": "10", "qp-regType-eq": "2"})
            .with_headers(
                **{
                    "Connection": "keep-alive",
                    "Accept": "application/json",
                    "x-app-id": "$x_app_id",
                    "x-tenant-id": "$x_tenant_id",
                    "sso_sessionid": "$sessionId",
                    "Token": "$token",
                }
            )
            .validate()
            .assert_equal("status_code", 200)
            .assert_equal('headers."Content-Type"', "application/json;charset=UTF-8")
            .assert_equal("body.code", "000000")
            .assert_equal("body.msg", "Success")
        ),
        Step(
            RunRequest("/ops/api/settlementRule/queryDistribution")
            .get("/ops/api/settlementRule/queryDistribution")
            .with_params(**{"customerCode": "$customerCode"})
            .with_headers(
                **{
                    "Connection": "keep-alive",
                    "Accept": "application/json",
                    "x-app-id": "$x_app_id",
                    "x-tenant-id": "$x_tenant_id",
                    "sso_sessionid": "$sessionId",
                    "Token": "$token",
                }
            )
            .validate()
            .assert_equal("status_code", 200)
            .assert_equal('headers."Content-Type"', "application/json;charset=UTF-8")
            .assert_equal("body.code", "000000")
            .assert_equal("body.msg", "Success")
        ),
    ]