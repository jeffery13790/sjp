# NOTE: Generated By HttpRunner v3.1.4
# FROM: 搜索商品，搜索到的商品列表中的第一个商品加入到购物车中，然后通过购物车选择新加入的商品，下单
"""
@author :springfall

"""

from httprunner import HttpRunner, Config, Step, RunRequest, RunTestCase, Parameters
import pytest
from testcases.login_test.login_test import TestCaseLogin as Login

class TestCaseBuyFromCart(HttpRunner):

    @pytest.mark.parametrize(
        'param',
        Parameters(
            {
                "phoneNumber-verifyCode": "${parameterize(common.csv)}",
                "good_name": "${get_good_name()}"
            }
        ),
    )
    def test_start(self, param):
        super().test_start(param)

    config = (
        Config("登录操作 ")
        .base_url("${get_base_url()}")
        .export(*['sessionId', 'token', 'accountCode', 'personId', "name", "nickname", "username", "phone", "memberCode", "userCode", "account_id", "storeCode", "platformPricing", "salePrice", "itemCode", "skuCode", "orderIdOut", "orderNo"])
        .verify(False)
    )

    teststeps = [
        Step(
            RunTestCase("登录")
            .call(Login)
            .export(*['sessionId', 'token', 'accountCode', 'personId', "name", "nickname", "username", "phone", "memberCode", "userCode", "account_id", "storeCode",])
        ),

        Step(
            RunRequest("检索商品")
            .get("/mall/search/queryItemList")
            .with_params(
                **{
                    "pageSize": "16",
                    "keyWord": "$good_name",
                    "qp-status-eq": "1",
                    "qp-storeCode-eq": "$storeCode",
                }
            )
            .with_headers(
                **{
                    "x-tenant-id": "2",
                    "sso_sessionid": "$sessionId",
                }
            )
            .with_cookies(
                **{
                    "sessionId": "$sessionId",
                    "token": "$token",
                }
            )
            .extract()
            .with_jmespath('body.data.list[0].itemCode', "itemCode")
            .with_jmespath('body.data.list[0].skuCode', "skuCode")
            .with_jmespath('body.data.list[0].platformPricing', "platformPricing")
            .with_jmespath('body.data.list[0].salePrice', "salePrice")
            .with_jmespath('body.data.list[0].name', "selected_good_name")
            .validate()
            .assert_equal("status_code", 200)
            .assert_equal('headers."Content-Type"', "application/json;charset=UTF-8")
            .assert_equal("body.code", "000000")
            .assert_equal("body.msg", "Success")
        ),
        Step(
            RunRequest("加入购物车")
            .post("/mall/cart/save")
            .with_headers(
                **{
                    "x-tenant-id": "2",
                    "sso_sessionid": "$sessionId",
                }
            )
            .with_cookies(
                **{
                    "sessionId": "$sessionId",
                    "token": "$token",
                }
            )
            .with_json(
                {
                    "buyerCode": "$accountCode",
                    "cartType": 0,
                    "channelId": 1,
                    "isChoice": 0,
                    "itemCode": "$itemCode",
                    "packingUnit": "册",
                    "sellerCode": "SJ001",
                    "skuCode": "$skuCode",
                    "skuQuantity": 1,
                    "storeCode": "$storeCode",
                    "qp-storeCode-eq": "$storeCode",
                    "taxRate": 0,
                    "taxRateCode": "",
                }
            )
            .extract()
            .with_jmespath('body.data.id', "cartId")
            .validate()
            .assert_equal("status_code", 200)
            .assert_equal('headers."Content-Type"', "application/json;charset=UTF-8")
            .assert_equal("body.code", "000000")
            .assert_equal("body.msg", "Success")
        ),

        Step(
            RunRequest("获取生成外部订单号")
            .get("/mall/order/getOrderCode")
            .with_headers(
                **{
                    "x-tenant-id": "2",
                    "sso_sessionid": "$sessionId",
                }
            )
            .with_cookies(
                **{
                    "sessionId": "$sessionId",
                    "token": "$token",
                }
            )
            .extract()
            .with_jmespath('body.data.orderNo', "orderIdOut")
            .validate()
            .assert_equal("status_code", 200)
            .assert_equal('headers."Content-Type"', "application/json;charset=UTF-8")
            .assert_equal("body.code", "000000")
            .assert_equal("body.msg", "Success")
        ),

        #获取收货地址
        Step(
            RunRequest("获取收货地址")
            .get("/mall/deliveryAddress/query")
            .with_params(
                **{
                    "pageSize": "50",
                    "qp-personId-eq": "$personId",
                    "sorter": "desc-type",
                }
            )
            .with_headers(
                **{
                    "x-tenant-id": "2",
                    "sso_sessionid": "$sessionId",
                }
            )
            .with_cookies(
                **{
                    "sessionId": "$sessionId",
                    "token": "$token",
                }
            )
            .extract()
            .with_jmespath('body.data.list[0]', "invoiceAddress")
            .validate()
            .assert_equal("status_code", 200)
            .assert_equal('headers."Content-Type"', "application/json;charset=UTF-8")
            .assert_equal("body.code", "000000")
            .assert_equal("body.msg", "Success")
        ),
        Step(
            RunRequest("/mall/cart/order/save")
            .post("/mall/cart/order/save")
            .with_headers(
                **{
                    "x-tenant-id": "2",
                    "sso_sessionid": "$sessionId",
                }
            )
            .with_cookies(
                **{
                    "sessionId": "$sessionId",
                    "token": "$token",
                }
            )
            .with_json(
                {
                    "cartIds": "$cartId",
                    "cartType": 0,
                    "customName": "$nickname",  #收货人地址
                    "discountAmount": 0,
                    "freigthAmount": 0,
                    "generalDiscountAmount": 0,
                    "memberCardCode": "$memberCode",
                    "memberCardLevel": "LV1",
                    "orderAddressReqDto": "$invoiceAddress",  #收货地址
                    "orderSource": 1,
                    "tradeType": 8,
                    "channel": 1,
                    "storeCode": "$storeCode",
                    "buyerCode": "$accountCode",
                    "actualAmount": "$salePrice",
                    "orderAmount": "$salePrice",
                    "orderLineReqDtoList": [
                        {
                            "itemCode": "$itemCode",
                            "skuCode": "$skuCode",
                            "skuPrice": "$salePrice",
                            "skuQuantity": 1,
                            "amount": "$salePrice",
                            "actualPrice": "$salePrice",
                            "averagePrice": 10000000,
                            "ticketPromotionPrice": 0,
                            "actualAmount": "$salePrice",
                            "averageAmount": 10000000,
                            "sellerCode": "SJ001",
                            "buyerCode": "$accountCode",
                            "storeCode": "$storeCode",
                            "totalPayTicket": 0,
                            "ticketPhase": 0,
                            "promotionPhase": 0,
                            "avaliableGoodsTicketList": [],
                            "canUseTicket": 1,
                            "isExpire": 0,
                            "promotionRules": [],
                            "itemName": "$selected_good_name",
                        },
                    ],
                    "payableAmount": "$salePrice",
                    "phoneNumber": "$phoneNumber",
                    "totalQuantity": 1,
                    "orderIdOut": "$orderIdOut",
                    "selectedOrderTicketIds": [],
                }
            )
            .teardown_hook("${teardown_hook_sleep_N_secs($response, 7)}")
            .extract()
            .with_jmespath('body.data.orderNo', "orderNo")
            .validate()
            .assert_equal("status_code", 200)
            .assert_equal('headers."Content-Type"', "application/json;charset=UTF-8")
            .assert_equal("body.code", "000000")
            .assert_equal("body.msg", "Success")
        ),
    ]