# NOTE: Generated By HttpRunner v3.1.4
# FROM: class_getClassList.har
"""
currentPage integer($int64) (query) 当前页数
pageSize integer($int64) (query) 每页记录数
qp-id-eq string (query) 品类id
qp-name-eq string (query) 品类名称
qp-status-eq string (query) 状态0启用1禁用
sorter string (query) 排序条件 desc-字段名或者asc-字段名
sso_sessionid string (header) sessionid
x-tenant-id * string (header)  tenant Default value : 2

"""


from httprunner import HttpRunner, Config, Step, RunRequest, RunTestCase, Parameters
import pytest
from testcases.api.ops.opsLogin_test import TestCaseOpslogin as Login


class TestCaseClassGetclasslist(HttpRunner):

    @pytest.mark.parametrize(
        "param",
        Parameters({
            "userName-password-verifyCode1-regType": "${parameterize(common.csv)}",
            "currentPage-pageSize-qp_id_eq-qp_name_eq-qp_status_eq-sorter": "${parameterize(testcases/api/ops/class/class_getClassList.csv)}",
        })
    )
    def test_start(self, param) -> "HttpRunner":
        super().test_start(param)

    config = (
        Config("登录ops环境")
        .base_url("${get_base_url()}")
        .variables(**{
            "x_tenant_id": "2",  # tenant Default value : 2     必填选项  header部分
            "x_app_id": "200",
        })
        .export(*["token", "sessionId"])
        .verify(False)
    )

    teststeps = [
        Step(
            RunTestCase("登录")
            .call(Login)
            .export(*["sessionId", "token"])
        ),
        Step(
            RunRequest("查询一系列资源对象，也就是列表")
            .get("/ops/api/class/getClassList")
            .with_params(**{
                "currentPage": "1",
                "pageSize": "80",
                "qp-id-eq": "$qp_id_eq",
                "qp-name-eq": "$qp_name_eq",
                "qp-status-eq": "$qp_status_eq",
                "sorter": "$sorter"
            })
            .with_headers(
                **{
                    "x-app-id": "$x_app_id",
                    "x-tenant-id": "$x_tenant_id",
                    "sso_sessionid": "$sessionId",
                    "Token": "$token",
                }
            )
            .with_cookies(
                **{
                    "sessionId": "sessionId",
                    "token": "$token",
                }
            )
            .validate()
            .assert_equal("status_code", 200)
            .assert_equal('headers."Content-Type"', "application/json;charset=UTF-8")
            .assert_equal("body.code", "000000")
            .assert_equal("body.msg", "Success")
        ),
    ]


if __name__ == "__main__":
    TestCaseClassGetclasslist().test_start()
