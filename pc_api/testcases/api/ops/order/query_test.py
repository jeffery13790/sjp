# NOTE: Generated By HttpRunner v3.1.4
# FROM: search.har

from httprunner import HttpRunner, Config, Step, RunRequest, RunTestCase, Parameters
import pytest
from testcases.api.ops.opsLogin_test import TestCaseOpslogin as Login
import datetime

class TestCaseQuery(HttpRunner):

    @pytest.mark.parametrize(
        "param",
        Parameters({
            "userName-password-verifyCode1-regType": "${parameterize(common.csv)}",
            "qp_orderNo_eq-qp_storeCode_eq-qp_phoneNumber_eq": "${parameterize(testcases/api/ops/order/query.csv)}",
        })
    )
    def test_start(self, param) -> "HttpRunner":
        super().test_start(param)

    config = (
        Config("登录ops环境")
        .base_url("${get_base_url()}")
        .variables(**{
            "x_tenant_id": "2",  # tenant Default value : 2     必填选项  header部分
            "x_app_id": "200",
        })
        .export(*["token", "sessionId"])
        .verify(False)
    )

    teststeps = [
        Step(
            RunTestCase("登录ops")
            .call(Login)
            .export(*["token", "sessionId"])
        ),
        Step(
            RunRequest("/ops/api/order/query")
            .get("/ops/api/order/query")
            .with_params(
                **{
                    "qp-orderNo-eq": "$qp_orderNo_eq",
                    "qp-storeCode-eq": "$qp_storeCode_eq",
                    "qp-phoneNumber-eq": "$qp_phoneNumber_eq",  #
                    "qp-createTime-ge": "{}".format((datetime.datetime.now() + datetime.timedelta(-10)).strftime("%Y-%m-%d %H:%M:%S")),
                    "qp-createTime-le": "{}".format(datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")),
                }
            )
            .with_headers(
                **{
                    "x-app-id": "200",
                    "x-tenant-id": "2",
                    "sso_sessionid": "$sessionId",
                    "Token": "$token",
                }
            )
            .with_cookies(
                **{
                    "sessionId": "$sessionId",
                    "token": "$token",
                }
            )
            .validate()
            .assert_equal("status_code", 200)
            .assert_equal('headers."Content-Type"', "application/json;charset=UTF-8")
            .assert_equal("body.code", "000000")
            .assert_equal("body.msg", "Success")
        ),
    ]

