# NOTE: Generated By HttpRunner v3.1.4
# FROM: class_queryClassByBusinessCode.har

"""
currentPage integer($int64) (query) 当前页数
pageSize integer($int64) (query) 每页记录数
qp-name-eq string (query) 品类名称
qp-status-eq string (query) 状态0启用1禁用
sorter string (query) 排序条件 desc-字段名或者asc-字段名
sso_sessionid string (header) sessionid
x-tenant-id * string (header) tenant Default value : 2
"""


from httprunner import HttpRunner, Config, Step, RunRequest, RunTestCase, Parameters
import pytest
from testcases.api.business.business_login_test import TestCaseBusinessLogin as Login


class TestCaseClassQueryclassbybusinesscode(HttpRunner):

    @pytest.mark.parametrize(
        "param",
        Parameters({
            "business_userName-business_password-business_verifyCode-business_regType": "${parameterize(common.csv)}",
            "store_code-currentPage-pageSize-qp_name_eq-qp_status_eq-sorter": "${parameterize(testcases/api/business/class/class_queryClassByBusinessCode.csv)}"
        })
    )
    def test_start(self, param) -> "HttpRunner":
        super().test_start(param)

    config = (
        Config("计算购物车中选中商品的价格")
        .base_url("${get_base_url()}")
        .variables(**{
            "x_app_id": "201",
            "x_tenant_id": "2",  # tenant Default value : 2     必填选项  header部分
        })
        .export(*["sessionId", "token", "employeeName", "employeeId", "accountName", "accountId", "accountCode"])
        .verify(False)
    )

    teststeps = [
        Step(
            RunTestCase("商家后台登录")
            .call(Login)
            .export(*["sessionId", "token", "employeeName", "employeeId", "accountName", "accountId", "accountCode"])
        ),
        Step(
            RunRequest("根据商家编码查询品类列表")
            .get("/business/api/class/queryClassByBusinessCode")
            .with_params(**{
                "current": "$currentPage",
                "pageSize": "$pageSize",
                "qp-name-eq": "$qp_name_eq",
                "qp-status-eq": "$qp_status_eq",
                "sorter": "$sorter"
            })
            .with_headers(
                **{
                    "x-app-id": "$x_app_id",
                    "x-tenant-id": "$x_tenant_id",
                    "sso_sessionid": "$sessionId",
                    "store-code": "$store_code",
                    "business-code": "$accountCode",
                    "token": "$token",
                }
            )
            .validate()
            .assert_equal("status_code", 200)
            .assert_equal('headers."Content-Type"', "application/json;charset=UTF-8")
            .assert_equal("body.code", "000000")
            .assert_equal("body.msg", "Success")
        ),
    ]


if __name__ == "__main__":
    TestCaseClassQueryclassbybusinesscode().test_start()
