# NOTE: Generated By HttpRunner v3.1.4
# FROM: 确认收货.har


from httprunner import HttpRunner, Config, Step, RunRequest, RunTestCase, Parameters
from testcases.order_test.create_send_good_test import TestCaseSendgood as SendGood
import pytest



class TestCaseConfirmReceipt(HttpRunner):

    @pytest.mark.parametrize(
        "param",
        Parameters({
            "good_name": "${get_good_name()}"
        })
    )
    def test_start(self, param) -> "HttpRunner":
        super().test_start(param)

    config = (
        Config("testcase description")
        .variables(**{
            "logisticsNo": "1111111111",
        })
        .base_url("${get_base_url()}")
        .export(*['sessionId', 'token', 'accountCode', 'personId',  "memberCode", 'orderNo', "storeCode", "member_id", "nickname"])
        .verify(False)
    )

    teststeps = [
        Step(
            RunTestCase("创建一个发货订单")
            .with_variables()
            .call(SendGood)
            .export(*['sessionId', 'token', 'accountCode', 'personId',  "memberCode", 'orderNo', "storeCode", "member_id", "nickname"])
        ),
        Step(
            RunRequest("/mall/order/getOrderPage")
            .get("/mall/order/getOrderPage")
            .with_params(
                **{
                    "currentPage": "1",
                    "pageSize": "10",
                    "qp-memberCardCode-eq": "$memberCode",
                    "qp-tradeStatus-in": "45",
                    "qp-storeCode-eq": "$storeCode",
                }
            )
            .with_headers(
                **{
                    "x-tenant-id": "2",
                    "sso_sessionid": "$sessionId",
                }
            )
            .with_cookies(
                **{
                    "sessionId": "$sessionId",
                    "token": "$token",
                }
            )
            .validate()
            .assert_equal("status_code", 200)
            .assert_equal('headers."Content-Type"', "application/json;charset=UTF-8")
            .assert_equal("body.code", "000000")
            .assert_equal("body.msg", "Success")
        ),
        Step(
            RunRequest("/mall/order/triggerOrder")
            .put("/mall/order/triggerOrder")
            .with_params(**{"event": "50", "orderNo": "$orderNo"})
            .with_headers(
                **{
                    "x-tenant-id": "2",
                    "sso_sessionid": "$sessionId",
                }
            )
            .with_cookies(
                **{
                    "sessionId": "$sessionId",
                    "token": "$token",
                }
            )
            .with_data("")
            .validate()
            .assert_equal("status_code", 200)
            .assert_equal('headers."Content-Type"', "application/json;charset=UTF-8")
            .assert_equal("body.code", "000000")
            .assert_equal("body.msg", "Success")
        ),
        Step(
            RunRequest("/mall/order/getOrderPage")
            .get("/mall/order/getOrderPage")
            .with_params(
                **{
                    "currentPage": "1",
                    "pageSize": "10",
                    "qp-memberCardCode-eq": "$memberCode",
                    "qp-tradeStatus-in": "45",
                    "qp-storeCode-eq": "$storeCode",
                }
            )
            .with_headers(
                **{
                    "x-tenant-id": "2",
                    "sso_sessionid": "$sessionId",
                }
            )
            .with_cookies(
                **{
                    "sessionId": "$sessionId",
                    "token": "$token",
                }
            )
            .validate()
            .assert_equal("status_code", 200)
            .assert_equal('headers."Content-Type"', "application/json;charset=UTF-8")
            .assert_equal("body.code", "000000")
            .assert_equal("body.msg", "Success")
        ),
    ]


# if __name__ == "__main__":
#     TestCase确认收货().test_start()
