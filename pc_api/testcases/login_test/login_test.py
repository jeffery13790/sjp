# NOTE: Generated By HttpRunner v3.1.4
# FROM: 购买商品.har
"""
@author :springfall

"""

from httprunner import HttpRunner, Config, Step, RunRequest, RunTestCase
import pytest
from httprunner import Parameters


class TestCaseLogin(HttpRunner):

    @pytest.mark.parametrize(
        'param',
        Parameters(
            {
                "phoneNumber-verifyCode": "${parameterize(common.csv)}",
            }
        ),
    )
    def test_start(self, param):
        super().test_start(param)

    config = (
        Config("登录操作 ")
        .base_url("${get_base_url()}")
        .export(*['sessionId', 'token', 'accountCode', 'personId', "name", "nickname", "username", "phone", "memberCode", "userCode", "account_id", "storeCode", "member_id"])# "member_id"
        .verify(False)
    )

    teststeps = [
        Step(
            RunRequest("/mall/web/checkCode")
            .get("/mall/web/checkCode")
            .with_params(
                **{"phoneNumber": "", "verifyCode": "", "verifyId": ""}
            )
            .validate()
            .assert_equal("status_code", 200)
            .assert_equal('headers."Content-Type"', "application/json;charset=UTF-8")
            .assert_equal("body.code", "000000")
            .assert_equal("body.msg", "Success")
        ),
        Step(
            RunRequest("/mall/web/pcLogin")
            .get("/mall/web/pcLogin")
            .with_params(**{"phoneNumber": "$phoneNumber", "verifyCode": "$verifyCode"})
            .extract()
            .with_jmespath('body.data.sessionId', "sessionId")
            .with_jmespath('body.data.token', "token")
            .validate()
            .assert_equal("status_code", 200)
            .assert_equal('headers."Content-Type"', "application/json;charset=UTF-8")
            .assert_equal("body.code", "000000")
            .assert_equal("body.msg", "Success")
        ),
        Step(
            RunRequest("/mall/user/getUserInfo")
            .get("/mall/user/getUserInfo")
            .with_params(
                **{"sessionId": "$sessionId"}
            )
            .with_headers(
                **{
                    "x-tenant-id": "2",
                    "sso_sessionid": "$sessionId",
                }
            )
            .with_cookies(
                **{
                    "sessionId": "$sessionId",
                    "token": "$token",
                }
            )
            .extract()
            .with_jmespath('body.data.accountResDto.accountCode', "accountCode")
            .with_jmespath('body.data.accountResDto.personId', "personId")
            .with_jmespath('body.data.accountResDto.name', "name")
            .with_jmespath('body.data.accountResDto.nickname', "nickname")
            .with_jmespath('body.data.accountResDto.username', "username")
            .with_jmespath('body.data.accountResDto.phone', "phone")
            .with_jmespath('body.data.memberCardResDto.memberCode', "memberCode")
            .with_jmespath('body.data.memberCardResDto.userId', "userId")
            .with_jmespath('body.data.personResDto.userCode', "userCode")
            .with_jmespath('body.data.accountResDto.id', "account_id")
            .with_jmespath('body.data.memberCardResDto.id', "member_id")
            # .with_jmespath("body.data.memberCardResDto.id", "member_id")
            .validate()
            .assert_equal("status_code", 200)
            .assert_equal('headers."Content-Type"', "application/json;charset=UTF-8")
            .assert_equal("body.code", "000000")
            .assert_equal("body.msg", "Success")
        ),
        Step(
            RunRequest("/mall/homeTemplate/selectDefaultStoreCode")
            .get("/mall/homeTemplate/selectDefaultStoreCode")
            .with_params(**{"businessType": "phonix", "type": "pc"})
            .with_headers(
                **{
                    "x-tenant-id": "2",
                    "sso_sessionid": "$sessionId",
                }
            )
                .with_cookies(
                **{
                    "sessionId": "$sessionId",
                    "token": "$token",
                }
            )
            .extract()
            .with_jmespath('body.data', "storeCode")
            .validate()
            .assert_equal("status_code", 200)
            .assert_equal('headers."Content-Type"', "application/json;charset=UTF-8")
            .assert_equal("body.code", "000000")
            .assert_equal("body.msg", "Success")
        ),
    ]


if __name__ == "__main__":
    TestCaseLogin().test_start()
